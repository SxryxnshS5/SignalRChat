@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>SignalR Chat</PageTitle>

<div class="container mt-4">
    <h3 class="text-center mb-4">SignalR Chat</h3>

    @if (!IsConnected) {
        <div class="card shadow-sm p-4">
            <div class="mb-3">
                <label for="usernameInput" class="form-label">What's your name?</label>
                <input id="usernameInput" @bind="username" class="form-control" placeholder="Enter your name">
            </div>
            <div class="d-flex justify-content-end">
                <button class="btn btn-primary" style="width: 150px;" @onclick="Connect">
                    Connect
                </button>
            </div>
        </div>
    }
    else {
        <div class="card shadow-sm p-4">
            <textarea class="form-control mb-3" readonly style="height: 300px;" @ref="TextAreaRef">@messages</textarea>
            <div class="input-group">
                <input @bind-value="message"
                       @bind-value:event="oninput"
                       @onkeyup="HandleInput"
                       class="form-control"
                       placeholder="Type your message...">
                <button class="btn btn-primary" @onclick="Send" disabled="@(!IsConnected)">
                    Send
                </button>
            </div>
        </div>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef;

    private async Task Connect() {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send() {
        if (hubConnection != null) {
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args) {
        if (args.Key.Equals("Enter")) {
            await Send();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() {
        if (hubConnection != null) {
            await hubConnection.DisposeAsync();
        }
    }
}
